name: CI/CD Pipeline

on:
  push:
    branches: [main, prod, develop]
  pull_request:
    branches: [main, prod, develop]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: npm clean-install
      - run: npm run build
      - name: Save cache (node_modules)
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.cache/Cypress
          key: ${{ runner.os }}-node_modules-${{ hashFiles('**/package-lock.json') }}

  test:
    runs-on: ubuntu-latest
    needs: [build]
    strategy:
      fail-fast: false
      matrix:
        browser: [chrome, edge]
    steps:
      - uses: actions/checkout@v4
      - name: Restore cache (node_modules)
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.cache/Cypress
          key: ${{ runner.os }}-node_modules-${{ hashFiles('**/package-lock.json') }}
      - name: Run Cypress tests on ${{ matrix.browser }}
        uses: cypress-io/github-action@v6
        with:
          install: false
          start: npm run dev
          wait-on: 'http://localhost:3000'
          browser: ${{ matrix.browser }}
          headed: false
      - name: Upload Cypress videos
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: cypress-videos-${{ matrix.browser }}
          path: cypress/videos
          retention-days: 5
      - name: Upload Cypress screenshots
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: cypress-screenshots-${{ matrix.browser }}
          path: cypress/screenshots
          retention-days: 5

  build-push-docker:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/prod' || github.ref == 'refs/heads/develop')
    permissions:
      contents: read
      packages: write
    needs: [test]
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/maodehka/devops
          tags: |
            type=ref,event=branch
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=prod,enable=${{ github.ref == 'refs/heads/prod' }}
            type=raw,value=test,enable=${{ github.ref == 'refs/heads/develop' }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy-production:
    if: github.ref == 'refs/heads/prod'
    needs: [build-push-docker]
    uses: ./.github/workflows/deploy.yml
    with:
      environment: production
      image-tag: prod
      server-path: prod
    secrets: inherit

  deploy-test:
    if: github.ref == 'refs/heads/develop'
    needs: [build-push-docker]
    uses: ./.github/workflows/deploy.yml
    with:
      environment: test
      image-tag: test
      server-path: test
    secrets: inherit